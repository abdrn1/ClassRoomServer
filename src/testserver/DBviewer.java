/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testserver;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 * @author Abd
 */
public class DBviewer extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MessageTable;
    private javax.swing.JTextField filterText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox recivedCB;
    private javax.swing.JCheckBox recivedCB1;
    private javax.swing.JPanel recivedcb2;
    private javax.swing.JComboBox<String> typeCb;

    /**
     * Creates new form DBviewer
     */
    public DBviewer() {
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBviewer().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recivedcb2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filterText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        typeCb = new javax.swing.JComboBox<>();
        recivedCB = new javax.swing.JCheckBox();
        recivedCB1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        recivedcb2.setBorder(javax.swing.BorderFactory.createTitledBorder("Records"));
        recivedcb2.setPreferredSize(new java.awt.Dimension(400, 150));
        recivedcb2.setLayout(null);

        jLabel1.setText("Filter Text");
        recivedcb2.add(jLabel1);
        jLabel1.setBounds(72, 42, 49, 14);

        filterText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTextKeyReleased(evt);
            }
        });
        recivedcb2.add(filterText);
        filterText.setBounds(125, 39, 268, 20);

        jLabel2.setText("Message Type");
        jLabel2.setToolTipText("");
        recivedcb2.add(jLabel2);
        jLabel2.setBounds(433, 42, 69, 14);

        typeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"LOG IN", "FILE", "IMAGE", "TEXT", "EXAM", "EXAM RESULT", "LOCK DEVICE", "UNLOCK DEVICE", "STUDENT ON BOARD", "IMAGE ON BOARD", "CAPTURED IMAGE", "MONITOR REQUEST"}));
        typeCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeCbItemStateChanged(evt);
            }
        });
        recivedcb2.add(typeCb);
        typeCb.setBounds(512, 39, 164, 20);

        recivedCB.setText("Recived");
        recivedCB.setName(""); // NOI18N
        recivedCB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recivedCBItemStateChanged(evt);
            }
        });
        recivedcb2.add(recivedCB);
        recivedCB.setBounds(512, 77, 63, 23);

        recivedCB1.setSelected(true);
        recivedCB1.setText("All");
        recivedCB1.setName(""); // NOI18N
        recivedCB1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                recivedCB1ItemStateChanged(evt);
            }
        });
        recivedcb2.add(recivedCB1);
        recivedCB1.setBounds(593, 77, 37, 23);

        getContentPane().add(recivedcb2, java.awt.BorderLayout.NORTH);

        MessageTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        MessageTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {"125", "15", "12:05", "TEXT", "hello ther", null, new Boolean(true)}
                },
                new String[]{
                        "MSenderID", "MReciverID", "Mtime", "mType", "Mdetail", "Mnote", "Mrecived"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        MessageTable.setEditingColumn(0);
        MessageTable.setEditingRow(0);
        jScrollPane1.setViewportView(MessageTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTextKeyReleased
        // TODO add your handling code here:
        String text = filterText.getText().trim();
        filterBYText(text);
    }//GEN-LAST:event_filterTextKeyReleased

    private void typeCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeCbItemStateChanged
        // TODO add your handling code here:
        String text = typeCb.getItemAt(typeCb.getSelectedIndex());
        filterBYText(text);

    }//GEN-LAST:event_typeCbItemStateChanged

    private void recivedCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_recivedCBItemStateChanged
        // TODO add your handling code here:
        filterByRecived(recivedCB.isSelected());
    }//GEN-LAST:event_recivedCBItemStateChanged

    private void recivedCB1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_recivedCB1ItemStateChanged
        // TODO add your handling code here:
        filterByRecived(recivedCB.isSelected());
    }//GEN-LAST:event_recivedCB1ItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int re = JOptionPane.showConfirmDialog(null,
                "Are You sure you want to close server", "Close Server", JOptionPane.YES_NO_OPTION);
        if (re == JOptionPane.OK_OPTION) {
            this.dispose();
            System.exit(0);
        } else {

        }
    }//GEN-LAST:event_formWindowClosing

    private void showtabel() {
        TableModel messageModel = MessageTable.getModel();

    }

    public void addNewRecord(LogRecord lr) {
        DefaultTableModel tModel = (DefaultTableModel) MessageTable.getModel();
        tModel.addRow(new Object[]{
                lr.getSenderID(),
                lr.getReciverID(),
                lr.getMessageTime().toString(),
                lr.getMessageType(),
                lr.getDetail(),
                lr.getNote(),
                lr.isRecived()
        });


    }

    private void filterBYText(String filterText) {
        DefaultTableModel tModel = (DefaultTableModel) MessageTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(tModel);
        MessageTable.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(filterText));
    }

    private void filterByRecived(boolean rec) {

        DefaultTableModel tModel = (DefaultTableModel) MessageTable.getModel();
        RowFilter<Object, Object> filter = new RowFilter<Object, Object>() {
            public boolean include(Entry entry) {
                boolean population = (boolean) entry.getValue(6);
                if (recivedCB1.isSelected()) {
                    return true;
                }
                return (population == rec);
            }
        };
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(tModel);
        MessageTable.setRowSorter(sorter);
        sorter.setRowFilter(filter);

    }
    // End of variables declaration//GEN-END:variables
}
