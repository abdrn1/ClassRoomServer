/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testserver;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;


/**
 * @author Abd
 */
public class DBQueryviewer extends javax.swing.JFrame {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable MessageTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel recivedcb2;
    private javax.swing.JComboBox<String> typeCb;

    /**
     * Creates new form DBviewer
     */

    public DBQueryviewer() {
        initComponents();
        // recivedcb2.add(dp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 37, 159, -1));


        // recivedcb2.add(dp2);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBQueryviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBQueryviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBQueryviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBQueryviewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBQueryviewer().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recivedcb2 = new javax.swing.JPanel();
        typeCb = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        recivedcb2.setBorder(javax.swing.BorderFactory.createTitledBorder("Records"));
        recivedcb2.setPreferredSize(new java.awt.Dimension(0, 120));
        recivedcb2.setLayout(null);

        typeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"LOG IN", "FILE", "IMAGE", "TEXT", "EXAM", "EXAM RESULT", "LOCK DEVICE", "UNLOCK DEVICE", "STUDENT ON BOARD", "IMAGE ON BOARD", "CAPTURED IMAGE", "MONITOR REQUEST"}));
        typeCb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeCbItemStateChanged(evt);
            }
        });
        recivedcb2.add(typeCb);
        typeCb.setBounds(550, 30, 164, 20);

        getContentPane().add(recivedcb2, java.awt.BorderLayout.PAGE_START);

        MessageTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        MessageTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {"125", "15", "12:05", "TEXT", "hello ther", null, new Boolean(true)},
                        {"22", "46", null, "FILE", "img.gif", null, new Boolean(true)}
                },
                new String[]{
                        "MSenderID", "MReciverID", "Mtime", "mType", "Mdetail", "Note", "Mrecived"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(MessageTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeCbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeCbItemStateChanged
        // TODO add your handling code here:
        String text = typeCb.getItemAt(typeCb.getSelectedIndex());
        filterBYText(text);

    }//GEN-LAST:event_typeCbItemStateChanged

    private void showtabel() {
        TableModel messageModel = MessageTable.getModel();

    }

    public void addNewRecord(LogRecord lr) {
        DefaultTableModel tModel = (DefaultTableModel) MessageTable.getModel();
        tModel.addRow(new Object[]{
                lr.getSenderID(),
                lr.getReciverID(),
                lr.getMessageTime().toString(),
                lr.getMessageType(),
                lr.getDetail(),
                lr.getNote(),
                lr.isRecived()
        });


    }

    private void filterBYText(String filterText) {
        DefaultTableModel tModel = (DefaultTableModel) MessageTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(tModel);
        MessageTable.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter(filterText));
    }
    // End of variables declaration//GEN-END:variables
}
